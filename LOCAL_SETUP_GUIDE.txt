=======================================================
STEP-BY-STEP GUIDE TO RUN THE PROJECT LOCALLY
=======================================================

This guide will walk you through the complete process of setting up and running
the KCA Streetfood Restaurant Reservation System on your local PC.

=====================
PREREQUISITES
=====================

1. Ensure you have the following installed:
   - Node.js (v14.x or higher): https://nodejs.org/
   - npm (v6.x or higher, comes with Node.js)
   - PostgreSQL (v13.x or higher): https://www.postgresql.org/download/
   - pgAdmin 4 (optional): https://www.pgadmin.org/download/

2. Verify installations by running these commands in your terminal/command prompt:
   - node --version
   - npm --version
   - psql --version

=====================
STEP 1: CLONE THE PROJECT
=====================

1. Create a folder where you want to store the project
2. Open Command Prompt or Terminal
3. Navigate to your created folder:
   cd path/to/your/folder

4. Clone the repository (if using Git):
   git clone https://github.com/yourusername/restaurant-reservation.git
   cd restaurant-reservation

   OR

   Extract the project ZIP file into your folder

=====================
STEP 2: DATABASE SETUP
=====================

1. Start PostgreSQL service
   - On Windows: Services app → PostgreSQL → Start
   - On macOS: sudo brew services start postgresql
   - On Linux: sudo service postgresql start

2. Open Command Prompt or Terminal
3. Access PostgreSQL:
   psql -U postgres

4. Create the database:
   CREATE DATABASE restaurant_reservation;
   \q

5. (Optional) Use pgAdmin 4 to:
   - Connect to your PostgreSQL server
   - Right-click on Databases → Create → Database
   - Name: restaurant_reservation

=====================
STEP 3: SERVER CONFIGURATION
=====================

1. Navigate to the server directory:
   cd path/to/restaurant-reservation/server

2. Install server dependencies:
   npm install

3. Create a .env file in the server directory:
   - Open a text editor
   - Create a new file
   - Save it as ".env" in the server directory
   - Add the following content (update with your PostgreSQL password):
   
     PORT=5000
     NODE_ENV=development
     DB_HOST=localhost
     DB_PORT=5432
     DB_NAME=restaurant_reservation
     DB_USER=postgres
     DB_PASSWORD=your_postgresql_password
     JWT_SECRET=your_jwt_secret_key_change_this
     JWT_EXPIRES_IN=7d

4. Initialize database tables:
   - If using a setup script:
     npm run db:init
   
   - If manually setting up:
     node db/init.js

=====================
STEP 4: CLIENT CONFIGURATION
=====================

1. Open a new Command Prompt or Terminal window
2. Navigate to the client directory:
   cd path/to/restaurant-reservation/client

3. Install client dependencies:
   npm install

4. (Optional) Create .env.local for any frontend environment variables:
   - Open a text editor
   - Create a new file
   - Save it as ".env.local" in the client directory
   - Add any frontend environment variables (all must be prefixed with REACT_APP_):
   
     REACT_APP_API_URL=http://localhost:5000/api

=====================
STEP 5: RUNNING THE APPLICATION
=====================

1. Start the server:
   - In the server directory terminal:
     npm start
   
   - For development with auto-reload:
     npm run dev

   - You should see a message like:
     "Server running on port 5000"
     "Connected to database"

2. Start the client (in a separate terminal):
   - In the client directory terminal:
     npm start

   - This will automatically open http://localhost:3000 in your browser
   - If it doesn't open automatically, manually navigate to http://localhost:3000

=====================
STEP 6: VERIFY SETUP
=====================

1. The React application should load in your browser
2. Try registering a new account to test database connection
3. Check server terminal for any errors or logs
4. Login with the admin account to access admin features:
   - Username: admin
   - Password: admin123
   - Email: admin@kcastreetfood.com

=====================
TROUBLESHOOTING
=====================

Database Connection Issues:
- Ensure PostgreSQL service is running
- Verify your database username and password in .env
- Check that the database was created properly
- Ensure your PostgreSQL allows local connections

Server Won't Start:
- Check if port 5000 is already in use:
  - Windows: netstat -ano | findstr :5000
  - Mac/Linux: lsof -i :5000
- Kill any process using port 5000 or change the port in .env

Client Won't Start:
- Check if port 3000 is already in use:
  - Windows: netstat -ano | findstr :3000
  - Mac/Linux: lsof -i :3000
- Check Node.js and npm versions are compatible
- Clear npm cache: npm cache clean --force
- Delete node_modules folder and package-lock.json, then npm install again

Authentication Issues:
- Ensure JWT_SECRET is set in your .env file
- Check that your database contains the users table
- Verify that admin user was properly seeded

=====================
RUNNING PROJECT IN DEVELOPMENT MODE
=====================

For active development with auto-reload:

1. Server:
   cd server
   npm run dev

2. Client:
   cd client
   npm start

This setup will automatically reload when code changes are detected.

=====================
ACCESSING THE API DIRECTLY
=====================

You can test API endpoints using tools like Postman or curl:

Base URL: http://localhost:5000/api

Authentication endpoints:
- POST /auth/register - Register a new user
- POST /auth/login - Login a user
- GET /auth/me - Get current user (requires token)

Restaurant endpoints:
- GET /restaurants - List all restaurants
- GET /restaurants/:id - Get restaurant details

Reservation endpoints:
- GET /reservations - List user reservations (requires token)
- POST /reservations - Create a reservation (requires token)
- PUT /reservations/:id - Update a reservation (requires token)
- DELETE /reservations/:id - Cancel a reservation (requires token)

=====================
SHUTTING DOWN PROPERLY
=====================

1. Stop the client server:
   - Press Ctrl+C in the client terminal
   - Confirm with Y if prompted

2. Stop the backend server:
   - Press Ctrl+C in the server terminal
   - Confirm with Y if prompted

3. (Optional) Stop PostgreSQL service:
   - On Windows: Services app → PostgreSQL → Stop
   - On macOS: sudo brew services stop postgresql
   - On Linux: sudo service postgresql stop